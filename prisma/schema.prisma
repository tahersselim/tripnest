datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  PhoneNumber    String?
  role           Role            @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  authenticators Authenticator[]
  bookings       Booking[]
  Payment        Payment[]
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Admin {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Trip      Trip[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Trip {
  id                  Int       @id @default(autoincrement())
  title               String
  destination         String
  description         String
  price               Float
  duration            String
  availableSeats      Int
  departureDate       DateTime
  returnDate          DateTime
  imageUrl            String
  createdById         String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  cutOffTimeInMinutes Int       @default(60)
  bookings            Booking[]
  createdBy           Admin     @relation(fields: [createdById], references: [id])
}

model Booking {
  id            Int           @id @default(autoincrement())
  tripId        Int
  phoneNumber   String?
  Address       String?
  userId        String
  bookingDate   DateTime      @default(now())
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(UNPAID)
  numberOfSeats Int
  totalPrice    Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  trip          Trip          @relation(fields: [tripId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  payments      Payment[]
}

model Payment {
  id            Int           @id @default(autoincrement())
  bookingId     Int
  userId        String
  paymentMethod PaymentMethod
  amount        Float
  paymentDate   DateTime      @default(now())
  paymentStatus PaymentStatus @default(UNPAID)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentId     Int           @unique
  booking       Booking       @relation(fields: [bookingId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  OTHER
}
